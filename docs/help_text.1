.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "SILO benchmarking CI system help" "" "" "" ""
.hy
.SH Essentials
.IP \[bu] 2
Insert: simply force-push your commit from your laptop to your branch
\f[V]bench_$USER\f[R] in the SILO repository on GitHub, where USER is
your ssh username here (e.g.\ \[lq]alexander\[rq]).
(Alternatively, \f[V]evobench-run insert $commit\f[R].)
.IP \[bu] 2
Aliases
.RS 2
.IP \[bu] 2
\f[V]list\f[R]: watch the job list (runs
\f[V]watch evobench-run list\f[R] with color options, or if options are
passed, pipes to less instead; \f[V]-v\f[R] and \f[V]-a\f[R] are the
most likely used options.)
.IP \[bu] 2
\f[V]list-all\f[R]: see all ever inserted jobs (runs
\f[V]evobench-run list-all\f[R] with pager and color option; passes
through given options)
.RE
.IP \[bu] 2
Outputs: see <https://silo-benchmarks.genspectrum.org/> or
\f[V]\[ti]/silo-benchmark-outputs\f[R].
.IP \[bu] 2
To investigate an error, see \[lq]How to investigate a job failure\[rq]
below
.SH Programs and logs
.PP
Everything goes through the \f[V]evobench-run\f[R] tool.
Run it without arguments (or \f[V]--help\f[R], \f[V]-h\f[R] or
\f[V]help\f[R]) to get a help text.
.IP \[bu] 2
You will primarily use the \f[V]list\f[R], \f[V]list-all\f[R], and
\f[V]insert\f[R] subcommands.
.IP \[bu] 2
The crontab runs \f[V]\[ti]/bin/evobench-run-poll\f[R], with a log in
\f[V]\[ti]/log/evobench-poll.log\f[R]
.IP \[bu] 2
The daemon that runs the jobs, running as
\f[V]evobench-run -v run     daemon\f[R], currently in a screen session,
logs to \f[V]\[ti]/log/daemon.log\f[R].
(This command must be started after first running
\f[V]source \[ti]/venv/bin/activate\f[R], or SILO won\[cq]t build!)
\f[V]tail     -f \[ti]/log/daemon.log\f[R] will show you interactively
what\[cq]s going on.
.PP
When you see a program with a name like \f[V]silo_02daf40559\f[R]
running in top/ps/whatever, then you know that it was started by the
benchmarks\[em]\[em]the SILO benchmark runner renames the binaries to
make sure rebuilds happen precisely when re-using a working directory
for a commit it hasn\[cq]t seen, and as a side effect this allows
distinguishing those programs from normal \f[V]silo\f[R] instances.
.PP
The \f[V]evobench-run\f[R] tool is built from the
\f[V]\[ti]/evobench/evobench-evaluator\f[R] directory.
To install a new version, after \f[V]git pull\f[R], use
\f[V]cargo install --locked --path .\f[R] from the root of this
directory (the \f[V]--locked\f[R] option says to use the dependencies
from the \f[V]Cargo.lock\f[R], which are known working and partially
reviewed or otherwise somewhat checked for supply chain safety; by
default it would install the newest possible versions).
.SH Queues
.PP
Use \f[V]evobench-run list\f[R] to see the current state of the
processing queues (it also has \f[V]-a\f[R] and \f[V]-v\f[R] options,
see \f[V]evobench-run list --help\f[R]).
To keep watching changes, just run the \f[V]list\f[R] wrapper script.
.PP
The queues consist of directories containing files, one job per file,
under \f[V]\[ti]/.evobench-run/queues\f[R].
If you\[cq]re careful, you can move jobs between queues by just moving
the files (using the \f[V]mv\f[R] command or similar), except you
shouldn\[cq]t move the file if it is currently being executed.
Use \f[V]evobench-run list -v\f[R] to both see the file names for each
job, and whether it is running (\f[V]R\f[R]).
.PP
(Possible todo: add convenience commands?)
.SH Working directories
.PP
evobench-run maintains a pool of working directories (clones of the
target project repository) under
\f[V]\[ti]/.evobench-run/working_directory_pool/\f[R] that it uses to
avoid the need to rebuild when a job for the same commit id is run
again.
.PP
When there is a failure during execution (be it build or run time) in a
particular working directory, the directory is taken out of active use
by the benchmarking runner to allow investigation.
The marking is done by storing \f[V]status: Error\f[R] in the
\f[V]$n.status\f[R] file for the directory in question; the status file
is also marked as executable as a hack to make it easy to see which
directories are in error status via ls
(\f[V]ls -lrt \[ti]/.evobench-run/working_directory_pool/\f[R]).
The pool directory also contains a \f[V]current\f[R] symlink that is
changed to the working directory whenever a job is run in it (it is left
around after the job is finished).
.PP
For each job run, a file
\f[V]$n.output_of_benchmarking_command_at_...\f[R] is created, that
contains the parameters used to run the job, and then its output (stderr
lines as \[lq]E\[rq] and stdout lines as \[lq]O\[rq]).
And for each job that resulted in an error, additionally a file
\f[V]$n.error_at_...\f[R] is created that contains the error (if the
error was issued by the target project (SILO), then it\[cq]s easier to
see the message in the \f[V]$n.output_of...\f[R] file, though).
.SS How to investigate a job failure
.PP
So if there was a failure (a job ended up in the
\[lq]erroneous-jobs\[rq] queue), you can check for the reason this way:
.IP "1." 3
Get the working directory number that it was last executed in (shown by
\f[V]list\f[R], in the \[lq]WD\[rq] column).
.IP "2." 3
Look at the errror and/or output of the command:
.RS 4
.IP
.nf
\f[C]
 cd \[ti]/.evobench-run/working_directory_pool/\[ga], \[ga]
 ls -lrt
 # pick the last $n.error_at... or $n.output_of.. file
 less ...
\f[R]
.fi
.RE
.IP "3." 3
If you need to investigate the working directory, just \f[V]cd $n\f[R]
and work with it; remember, it is taken out of rotation when there was
an error, so your work will not be interrupted.
.IP "4." 3
When done, just \f[V]rm -rf $n\f[R] (todo: easy way to give dir back
into rotation?)
.SH Results and datasets
.PP
The results are written to \f[V]\[ti]/silo-benchmark-outputs\f[R]
.PP
\f[V]\[ti]/www_data\f[R] (currently a symlink to
\f[V]\[ti]/silo-benchmark-outputs\f[R]) is what\[cq]s shown on
<https://silo-benchmarks.genspectrum.org/>
.PP
The input datasets are in \f[V]\[ti]/silo-benchmark-datasets/\f[R].
Please never modify existing datasets, it would invalidate existing
results.
Add a new subdirectory (besides \f[V]SC2open\f[R] and
\f[V]west_nile\f[R]) if you want to add a different dataset.
You can refer to it by name via the \f[V]BENCHMARK_DATASET_NAME\f[R]
custom parameter in the \f[V]custom_parameters_set\f[R] field in the
config file, see below for where to find that.
.SH Configuration
.PP
If you want to read or need to edit the configuration, you find it in
\f[V]\[ti]/etc/\f[R], which is a symlink to
\f[V]\[ti]/.silo-benchmark-ci/etc\f[R].
The file \f[V]evobench-run.ron\f[R] in this directory is referenced by
symlink from \f[V]\[ti]/.evobench-run.ron\f[R], which is the location
read by \f[V]evobench-run\f[R].
Since this is a Git repository, please commit your changes\[em]\[em]they
should end up on <https://github.com/GenSpectrum/silo-benchmark-ci/>
eventually.
.PP
That same repository is also independently cloned at
\f[V]/opt/silo-benchmark-ci\f[R], but just for the
\f[V]/opt/silo-benchmark-ci/root/other-activity\f[R] file, which is
configured to be executed via sudo (hence we keep this file separate,
owned by root, for security).
.SH SEE ALSO
.IP \[bu] 2
Evobench
documentation (https://github.com/GenSpectrum/evobench/blob/master/evobench-evaluator/docs/overview.md)
